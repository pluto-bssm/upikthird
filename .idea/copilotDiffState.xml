<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/oauth2/callback/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/oauth2/callback/route.ts" />
              <option name="updatedContent" value="// 이 파일은 사용되지 않습니다. page.tsx가 모든 처리를 담당합니다.&#10;// route.ts와 page.tsx는 같은 경로에 공존할 수 없습니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/token-initializer.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/token-initializer.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useEffect } from &quot;react&quot;;&#10;import { TOKEN } from &quot;@/constants/common/constant&quot;;&#10;import { Storage } from &quot;@/apis/storage/storage&quot;;&#10;&#10;export default function TokenInitializer() {&#10;  useEffect(() =&gt; {&#10;    const getCookie = (name: string) =&gt; {&#10;      if (typeof document === &quot;undefined&quot;) return null;&#10;      const value = `; ${document.cookie}`;&#10;      const parts = value.split(`; ${name}=`);&#10;      if (parts.length === 2) return parts.pop()?.split(&quot;;&quot;).shift();&#10;      return null;&#10;    };&#10;&#10;    const clearCookie = (name: string) =&gt; {&#10;      if (typeof document === &quot;undefined&quot;) return;&#10;      document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;&#10;    };&#10;&#10;    try {&#10;      const accessToken = getCookie(&quot;accessToken&quot;);&#10;      const refreshToken = getCookie(&quot;refreshToken&quot;);&#10;&#10;      console.log(&quot;Token Initializer - Found Access Token:&quot;, !!accessToken);&#10;      console.log(&quot;Token Initializer - Found Refresh Token:&quot;, !!refreshToken);&#10;&#10;      if (accessToken) {&#10;        console.log(&quot;Saving access token to localStorage&quot;);&#10;        Storage.setItem(TOKEN.ACCESS, accessToken);&#10;        clearCookie(&quot;accessToken&quot;);&#10;      }&#10;&#10;      if (refreshToken) {&#10;        console.log(&quot;Saving refresh token to localStorage&quot;);&#10;        Storage.setItem(TOKEN.REFRESH, refreshToken);&#10;        clearCookie(&quot;refreshToken&quot;);&#10;      }&#10;&#10;      if (accessToken || refreshToken) {&#10;        console.log(&quot;Tokens saved successfully&quot;);&#10;        console.log(&quot;Access Token in storage:&quot;, Storage.getItem(TOKEN.ACCESS) ? &quot;✓&quot; : &quot;✗&quot;);&#10;        console.log(&quot;Refresh Token in storage:&quot;, Storage.getItem(TOKEN.REFRESH) ? &quot;✓&quot; : &quot;✗&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error in TokenInitializer:&quot;, error);&#10;    }&#10;  }, []);&#10;&#10;  return null;&#10;}&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/constants/upik.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/constants/upik.ts" />
              <option name="originalContent" value="export const API = {&#10;  BASE_URL: process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;,&#10;  GRAPHQL_URL: `${process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;}`,&#10;  TIMEOUT: 15000,&#10;} as const;&#10;&#10;const OAUTH_BASE_URL =&#10;  process.env.NEXT_PUBLIC_BASE_URL || &quot;http://localhost:8080&quot;;&#10;&#10;export const OAUTH = {&#10;  GOOGLE: {&#10;    AUTH_URL: `${OAUTH_BASE_URL}/oauth2/authorization/google`,&#10;    TOKEN_URL:&#10;      process.env.NEXT_PUBLIC_OAUTH_URL || `${OAUTH_BASE_URL}/auth/code?code=`,&#10;    CALLBACK_PATH: &quot;/oauth2/callback&quot;,&#10;  },&#10;};&#10;&#10;export const ROUTES = {&#10;  LOGIN: &quot;/login&quot;,&#10;  ROOT: &quot;/&quot;,&#10;  MAIN: &quot;/&quot;,&#10;&#10;  QUESTION: &quot;/question&quot;,&#10;  QUESTION_CREATE: &quot;/question/create&quot;,&#10;  QUESTION_DETAIL: (id: string) =&gt; `/question/${id}`,&#10;  QUESTION_REPORT: (id: string) =&gt; `/question/${id}/report`,&#10;  QUESTION_COMMENT_REPORT: (id: string) =&gt; `/question/${id}/comment-report`,&#10;&#10;  VOTE: &quot;/vote&quot;,&#10;  VOTE_SEARCH: &quot;/vote/search&quot;,&#10;&#10;  MY: &quot;/my&quot;,&#10;  MY_VOTES: &quot;/my/my-votes&quot;,&#10;  MY_VOTE_RESPONSES: &quot;/my/vote-responses&quot;,&#10;  MY_POSTS: &quot;/my/posts&quot;,&#10;  MY_INFO: &quot;/my/info&quot;,&#10;  MY_ACCOUNT_INFO: &quot;/my/info&quot;,&#10;  MY_SAVED_GUIDES: &quot;/my/saved/guide&quot;,&#10;  MY_SAVED_POSTS: &quot;/my/saved/post&quot;,&#10;&#10;  HOME: &quot;/home&quot;,&#10;  GUIDE: &quot;/guide&quot;,&#10;  DASHBOARD: &quot;/dashboard&quot;,&#10;} as const;&#10;&#10;export const TOKEN = {&#10;  ACCESS: &quot;accessToken&quot;,&#10;  REFRESH: &quot;refreshToken&quot;,&#10;} as const;&#10;&#10;export const STORAGE_KEYS = {&#10;  TOKENS: {&#10;    ACCESS: TOKEN.ACCESS,&#10;    REFRESH: TOKEN.REFRESH,&#10;  },&#10;  USER: &quot;user&quot;,&#10;  THEME: &quot;theme&quot;,&#10;} as const;&#10;&#10;export const HTTP_HEADERS = {&#10;  CONTENT_TYPE: &quot;application/json&quot;,&#10;  AUTHORIZATION: &quot;Authorization&quot;,&#10;  REFRESH_TOKEN: &quot;Refresh-Token&quot;,&#10;} as const;&#10;&#10;export const HTTP_STATUS = {&#10;  OK: 200,&#10;  CREATED: 201,&#10;  BAD_REQUEST: 400,&#10;  UNAUTHORIZED: 401,&#10;  FORBIDDEN: 403,&#10;  NOT_FOUND: 404,&#10;  INTERNAL_SERVER_ERROR: 500,&#10;} as const;&#10;&#10;export const ERROR_MESSAGES = {&#10;  UNAUTHORIZED: &quot;다시 로그인 해주세요&quot;,&#10;  NETWORK_ERROR: &quot;네트워크 연결을 확인해주세요&quot;,&#10;  SERVER_ERROR: &quot;서버 오류가 발생했습니다&quot;,&#10;  NOT_FOUND: &quot;요청하신 항목을 찾을 수 없습니다&quot;,&#10;} as const;&#10;&#10;export const FEATURE_FLAGS = {&#10;  ENABLE_OAUTH: process.env.NEXT_PUBLIC_ENABLE_OAUTH !== &quot;false&quot;,&#10;  ENABLE_GRAPHQL: process.env.NEXT_PUBLIC_ENABLE_GRAPHQL !== &quot;false&quot;,&#10;  DEBUG_MODE: process.env.NODE_ENV === &quot;development&quot;,&#10;} as const;&#10;&#10;export const VALIDATION = {&#10;  QUESTION_TITLE_MAX_LENGTH: 200,&#10;  QUESTION_CONTENT_MAX_LENGTH: 2000,&#10;  REPORT_REASON_MAX_LENGTH: 500,&#10;  MIN_PASSWORD_LENGTH: 8,&#10;} as const;&#10;" />
              <option name="updatedContent" value="export const API = {&#10;  BASE_URL: process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;,&#10;  GRAPHQL_URL: `${process.env.NEXT_PUBLIC_API_URL || &quot;http://localhost:8080&quot;}`,&#10;  TIMEOUT: 15000,&#10;} as const;&#10;&#10;const OAUTH_BASE_URL =&#10;  process.env.NEXT_PUBLIC_BASE_URL || &quot;http://localhost:8080&quot;;&#10;&#10;export const OAUTH = {&#10;  GOOGLE: {&#10;    AUTH_URL: `${OAUTH_BASE_URL}/oauth2/authorization/google`,&#10;    TOKEN_URL:&#10;      process.env.NEXT_PUBLIC_OAUTH_URL || `${OAUTH_BASE_URL}/auth/code?code=`,&#10;    CALLBACK_PATH: &quot;/oauth2/callback&quot;,&#10;  },&#10;};&#10;&#10;export const ROUTES = {&#10;  LOGIN: &quot;/login&quot;,&#10;  ROOT: &quot;/&quot;,&#10;  MAIN: &quot;/&quot;,&#10;&#10;  QUESTION: &quot;/question&quot;,&#10;  QUESTION_CREATE: &quot;/question/create&quot;,&#10;  QUESTION_DETAIL: (id: string) =&gt; `/question/${id}`,&#10;  QUESTION_REPORT: (id: string) =&gt; `/question/${id}/report`,&#10;  QUESTION_COMMENT_REPORT: (id: string) =&gt; `/question/${id}/comment-report`,&#10;&#10;  VOTE: &quot;/vote&quot;,&#10;  VOTE_SEARCH: &quot;/vote/search&quot;,&#10;&#10;  MY: &quot;/my&quot;,&#10;  MY_VOTES: &quot;/my/my-votes&quot;,&#10;  MY_VOTE_RESPONSES: &quot;/my/vote-responses&quot;,&#10;  MY_POSTS: &quot;/my/posts&quot;,&#10;  MY_INFO: &quot;/my/info&quot;,&#10;  MY_ACCOUNT_INFO: &quot;/my/info&quot;,&#10;  MY_SAVED_GUIDES: &quot;/my/saved/guide&quot;,&#10;  MY_SAVED_POSTS: &quot;/my/saved/post&quot;,&#10;&#10;  HOME: &quot;/home&quot;,&#10;  GUIDE: &quot;/guide&quot;,&#10;  DASHBOARD: &quot;/dashboard&quot;,&#10;} as const;&#10;&#10;export const TOKEN = {&#10;  ACCESS: &quot;accessToken&quot;,&#10;  REFRESH: &quot;refreshToken&quot;,&#10;} as const;&#10;&#10;export const STORAGE_KEYS = {&#10;  TOKENS: {&#10;    ACCESS: TOKEN.ACCESS,&#10;    REFRESH: TOKEN.REFRESH,&#10;  },&#10;  USER: &quot;user&quot;,&#10;  THEME: &quot;theme&quot;,&#10;} as const;&#10;&#10;export const HTTP_HEADERS = {&#10;  CONTENT_TYPE: &quot;application/json&quot;,&#10;  AUTHORIZATION: &quot;Authorization&quot;,&#10;  REFRESH_TOKEN: &quot;Refresh-Token&quot;,&#10;} as const;&#10;&#10;export const HTTP_STATUS = {&#10;  OK: 200,&#10;  CREATED: 201,&#10;  BAD_REQUEST: 400,&#10;  UNAUTHORIZED: 401,&#10;  FORBIDDEN: 403,&#10;  NOT_FOUND: 404,&#10;  INTERNAL_SERVER_ERROR: 500,&#10;} as const;&#10;&#10;export const ERROR_MESSAGES = {&#10;  UNAUTHORIZED: &quot;다시 로그인 해주세요&quot;,&#10;  NETWORK_ERROR: &quot;네트워크 연결을 확인해주세요&quot;,&#10;  SERVER_ERROR: &quot;서버 오류가 발생했습니다&quot;,&#10;  NOT_FOUND: &quot;요청하신 항목을 찾을 수 없습니다&quot;,&#10;} as const;&#10;&#10;export const FEATURE_FLAGS = {&#10;  ENABLE_OAUTH: process.env.NEXT_PUBLIC_ENABLE_OAUTH !== &quot;false&quot;,&#10;  ENABLE_GRAPHQL: process.env.NEXT_PUBLIC_ENABLE_GRAPHQL !== &quot;false&quot;,&#10;  DEBUG_MODE: process.env.NODE_ENV === &quot;development&quot;,&#10;} as const;&#10;&#10;export const VALIDATION = {&#10;  QUESTION_TITLE_MAX_LENGTH: 200,&#10;  QUESTION_CONTENT_MAX_LENGTH: 2000,&#10;  REPORT_REASON_MAX_LENGTH: 500,&#10;  MIN_PASSWORD_LENGTH: 8,&#10;} as const;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>