<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/services/vote/api.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/services/vote/api.ts" />
              <option name="originalContent" value="import { upik } from &quot;@/apis&quot;;&#10;import type { VotePayload, CreateVoteResponseInput } from &quot;@/types/graphql&quot;;&#10;import { GET_MY_VOTES, GET_VOTE_BY_ID, GET_ALL_VOTES } from &quot;./queries&quot;;&#10;import { CREATE_VOTE_RESPONSE } from &quot;./mutations&quot;;&#10;import { Storage } from &quot;@/apis/storage/storage&quot;;&#10;import { TOKEN } from &quot;@/constants/common/constant&quot;;&#10;&#10;const API_URL = process.env.NEXT_PUBLIC_API_URL ;&#10;&#10;interface GraphQLRequest {&#10;  query: string;&#10;  variables?: Record&lt;string, unknown&gt;;&#10;}&#10;export async function getMyVotes(): Promise&lt;VotePayload[]&gt; {&#10;  const token = Storage.getItem(TOKEN.ACCESS);&#10;  const response = await upik.post(&#10;    &quot;&quot;,&#10;    {&#10;      query: GET_MY_VOTES,&#10;    } as GraphQLRequest,&#10;    {&#10;      headers: {&#10;        Authorization: `Bearer ${token}`,&#10;      },&#10;    },&#10;  );&#10;&#10;  const votes = response.data?.data?.vote?.getMyVotes || [];&#10;  return votes;&#10;}&#10;&#10;export async function getVoteById(id: string): Promise&lt;VotePayload&gt; {&#10;  const token = Storage.getItem(TOKEN.ACCESS);&#10;  const response = await upik.post(&#10;    &quot;&quot;,&#10;    {&#10;      query: GET_VOTE_BY_ID,&#10;      variables: { id },&#10;    } as GraphQLRequest,&#10;    {&#10;      headers: {&#10;        Authorization: `Bearer ${token}`,&#10;      },&#10;    },&#10;  );&#10;&#10;  const vote = response.data?.data?.vote?.getVoteById;&#10;  if (!vote) {&#10;    throw new Error(&quot;Vote not found&quot;);&#10;  }&#10;  return vote;&#10;}&#10;&#10;export async function getAllVotes(): Promise&lt;VotePayload[]&gt; {&#10;  const response = await upik.post(API_URL, {&#10;    query: GET_ALL_VOTES,&#10;  } as GraphQLRequest);&#10;&#10;  const votes = response.data?.data?.vote?.getAllVotes || [];&#10;  return votes;&#10;}&#10;&#10;export async function createVoteResponse(&#10;  input: CreateVoteResponseInput,&#10;): Promise&lt;boolean&gt; {&#10;  const response = await upik.post(&quot;&quot;, {&#10;    query: CREATE_VOTE_RESPONSE,&#10;    variables: { input },&#10;  } as GraphQLRequest);&#10;&#10;  const result = response.data?.data?.voteResponse?.createVoteResponse;&#10;  if (!result?.success) {&#10;    throw new Error(result?.message || &quot;Failed to create vote response&quot;);&#10;  }&#10;  return true;&#10;}&#10;" />
              <option name="updatedContent" value="import { upik } from &quot;@/apis&quot;;&#10;import type { VotePayload, CreateVoteResponseInput } from &quot;@/types/graphql&quot;;&#10;import { GET_MY_VOTES, GET_VOTE_BY_ID, GET_ALL_VOTES } from &quot;./queries&quot;;&#10;import { CREATE_VOTE_RESPONSE } from &quot;./mutations&quot;;&#10;import { Storage } from &quot;@/apis/storage/storage&quot;;&#10;import { TOKEN } from &quot;@/constants/common/constant&quot;;&#10;&#10;&#10;interface GraphQLRequest {&#10;  query: string;&#10;  variables?: Record&lt;string, unknown&gt;;&#10;}&#10;export async function getMyVotes(): Promise&lt;VotePayload[]&gt; {&#10;  const token = Storage.getItem(TOKEN.ACCESS);&#10;  const response = await upik.post(&#10;    &quot;&quot;,&#10;    {&#10;      query: GET_MY_VOTES,&#10;    } as GraphQLRequest,&#10;    {&#10;      headers: {&#10;        Authorization: `Bearer ${token}`,&#10;      },&#10;    },&#10;  );&#10;&#10;  const votes = response.data?.data?.vote?.getMyVotes || [];&#10;  return votes;&#10;}&#10;&#10;export async function getVoteById(id: string): Promise&lt;VotePayload&gt; {&#10;  const token = Storage.getItem(TOKEN.ACCESS);&#10;  const response = await upik.post(&#10;    &quot;&quot;,&#10;    {&#10;      query: GET_VOTE_BY_ID,&#10;      variables: { id },&#10;    } as GraphQLRequest,&#10;    {&#10;      headers: {&#10;        Authorization: `Bearer ${token}`,&#10;      },&#10;    },&#10;  );&#10;&#10;  const vote = response.data?.data?.vote?.getVoteById;&#10;  if (!vote) {&#10;    throw new Error(&quot;Vote not found&quot;);&#10;  }&#10;  return vote;&#10;}&#10;&#10;export async function getAllVotes(): Promise&lt;VotePayload[]&gt; {&#10;  const response = await upik.post(&quot;&quot;, {&#10;    query: GET_ALL_VOTES,&#10;  } as GraphQLRequest);&#10;&#10;  const votes = response.data?.data?.vote?.getAllVotes || [];&#10;  return votes;&#10;}&#10;&#10;export async function createVoteResponse(&#10;  input: CreateVoteResponseInput,&#10;): Promise&lt;boolean&gt; {&#10;  const response = await upik.post(&quot;&quot;, {&#10;    query: CREATE_VOTE_RESPONSE,&#10;    variables: { input },&#10;  } as GraphQLRequest);&#10;&#10;  const result = response.data?.data?.voteResponse?.createVoteResponse;&#10;  if (!result?.success) {&#10;    throw new Error(result?.message || &quot;Failed to create vote response&quot;);&#10;  }&#10;  return true;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>